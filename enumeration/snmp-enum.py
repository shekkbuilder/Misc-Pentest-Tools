#!/usr/bin/env python
#
# Script name     : snmp-enum.py
# Version         : 1.0
# Created date    : 3/1/2017
# Last update     : 5/1/2017
# Inspired by     : snmp-check
# Author          : Milton Valencia (wetw0rk)
# Python version  : 2.7
# Description     : When conducting a pen-test it can be hard to read or decipher
#                   the output when you walk the entire MIB tree; this script allows
#                   you to easily read the output. I prevously used snmpwalk in a loop
#                   however this script allows me to re-use the code on a linux box that
#                   does not necessarily have snmpwalk installed.
#

import sys, time, argparse
from pysnmp.entity.rfc3413.oneliner import cmdgen

# GET These
oids = {'System Name': '1.3.6.1.2.1.1.5.0',
	'System Description': '1.3.6.1.2.1.1.1.0',
	'System Contact': '1.3.6.1.2.1.1.4.0',
	'System Location': '1.3.6.1.2.1.1.6.0',
	'IP Forwarding': '1.3.6.1.2.1.4.1.0',
	'IP Header TTL': '1.3.6.1.2.1.4.2.0'
	}

# WALK These
oidw = {'System Processes': '1.3.6.1.2.1.25.1.6.0',
	'Running Programs': '1.3.6.1.2.1.25.4.2.1.2',
	'Process Paths': '1.3.6.1.2.1.25.4.2.1.4',
	'Storage Units': '1.3.6.1.2.1.25.2.3.1.4',
	'Software Names': '1.3.6.1.2.1.25.6.3.1.2',
	'User Accounts': '1.3.6.1.4.1.77.1.2.25',
	'TCP Local Ports': '1.3.6.1.2.1.6.13.1.3'
	}


def snmpget(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY, oid):

	cmdGen = cmdgen.CommandGenerator()

	errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
		cmdgen.CommunityData(SNMP_COMMUNITY),
		cmdgen.UdpTransportTarget((SNMP_HOST, SNMP_PORT)),
	oid)

	# engine errors
	if errorIndication:
		print(errorIndication)
	else:
		# agent errors
		if errorStatus:
			print('%s at %s' % (
				errorStatus.prettyPrint(),
				errorIndex and varBinds[int(errorIndex)-1] or '?'
			)
		)
		else:
			# snmp response contents
			for name, val in varBinds:
				print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))

def snmpwalk(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY, oid):

	cmdGen = cmdgen.CommandGenerator()

	errorIndication, errorStatus, errorIndex, varBindTable = cmdGen.nextCmd(
		cmdgen.CommunityData(SNMP_COMMUNITY),
		cmdgen.UdpTransportTarget((SNMP_HOST, SNMP_PORT)),
		oid
	)
	# engine errors
	if errorStatus:
		print('%s at %s' % (
			errorStatus.prettyPrint(),
			errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'
			)
		)
	else:
		for varBindTableRow in varBindTable:
			# snmp response contents
			for name, val in varBindTableRow:
				print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))


def snmpcheck(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY):

	# GET
	for key in oids:
		print "[*] Obtaining %s" % key
		# get answer from snmpget function
		answer = snmpget(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY, oids[key])

	# WALK
	for key in oidw:
		print "[*] Enumerating %s" % key
		# get answer from snmpwalk function
		answer = snmpwalk(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY, oidw[key])

def main():

	try:
		# handle arguments
		parser = argparse.ArgumentParser()
		parser.add_argument("-t", "--target", help="target to enumerate")
		parser.add_argument("-p", "--port", help="target port")
		parser.add_argument("-c", "--community", help="public community string")
		args = parser.parse_args()
		# assign args
		SNMP_HOST = args.target
		SNMP_PORT = int(args.port)
		SNMP_COMMUNITY = args.community
	except:
		# print msg if error
		print parser.print_help()
		sys.exit()

	snmpcheck(SNMP_HOST, SNMP_PORT, SNMP_COMMUNITY)

main()
