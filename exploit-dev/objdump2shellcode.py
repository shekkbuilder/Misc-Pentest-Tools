#!/usr/bin/env python
#
# Script name     : objdump2shellcode.py
# Version         : 2.0
# Created date    : 5/27/2017
# Last update     : 7/18/2017
# Author          : wetw0rk
# Python version  : 2.7
# Description     : This is 1000000000 times easier that manually
#                   copying/pasting custom shellcode generated by
#                   objdump.
#

import os, sys, subprocess, argparse

# one liner found here:
# https://stackoverflow.com/questions/12328108/how-can-i-split-a-string-in-python
def print_shellcode(ops, mode, badchars):

	com = '"'

	try:
		stop_now = badchars.split(",")
		for i in range(len(stop_now)):
			if stop_now[i] in ops:
				print "[-] Bad Character Spotted -> " + stop_now[i]
	except:
		pass

	if mode == "python":
		print 'buf = ""'
		splits = [ops[x:x+80] for x in range(0,len(ops),80)]
		for i in range(len(splits)):
			print "buf += \"" + splits[i] + com
	if mode == "c":
		print "char shellcode[]= "
		splits = [ops[x:x+80] for x in range(0,len(ops),80)]
		for i in range(len(splits)):
			print com + splits[i] + com
	if mode == "raw":
		splits = [ops[x:x+80] for x in range(0,len(ops),80)]
		for i in range(len(splits)):
			print com + splits[i] + com

def dump_raw(dumpfile, mode, badchars):

	# list object to capture raw shellcode
	buf = []
	ops = ""

	# run objdump to extract raw shellcode
	try:
		dump_out = subprocess.Popen(['objdump', '-D', dumpfile],
			stdout=subprocess.PIPE).communicate()[0]
	except:
		print "[-] error running command"
		sys.exit()
	# split up the output by [tab]
	split = dump_out.split("\t")
	# loop through each string
	for i in range(len(split)):
		# get only our shellcode!
		if len(split[i]) == 21:
			sweet = split[i]
			if "%" not in split[i]:
				op = str(split[i])
				buf += op.split("\n")
	# pretty print for easy copy/paste
	for i in range(len(buf)):
		each = buf[i].split(" ")
		for i in range(len(each)):
			if len(each[i]) > 0:
				ops += "\\x" + each[i]

	print_shellcode(ops, mode, badchars)

def main():

	# handle command line arguments
	parser = argparse.ArgumentParser()
	parser.add_argument("-d", "--dump", help="binary to dump")
	parser.add_argument("-f", "--format", help="format of the dump: c, python, or raw")
	parser.add_argument("-b", "--badchar", help="seperate bad chars like so \"\\x00,\\x0a\"")
	args = parser.parse_args()
	# assign arguments
	dumpfile = args.dump
	mode = args.format
	badchars = args.badchar
	# pass to function
	if dumpfile > 1:
		dump_raw(dumpfile, mode, badchars)
	else:
		print(parser.print_help())

main()

