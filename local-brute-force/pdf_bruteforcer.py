#!/usr/bin/env python3
#
# Script name     : pdf_bruteforcer.py
# Version         : 1.0
# Created date    : 3/1/2017
# Last update     : 5/1/2017
# Author          : wetw0rk
# Python version  : 2.7
# Description     : Simply does a bruteforce attack on an encrypted PDF document.
#

import os, sys, PyPDF2
from termcolor import colored

def banner():

	os.system('clear')
	print(colored("           .___ _____                              __                    ", "red"))
	print(colored("______   __| _// ____\   ________________    ____ |  | __ ___________    ", "red"))
	print(colored("\____ \ / __ |\   __\  _/ ___\_  __ \__  \ _/ ___\|  |/ // __ \_  __ \   ", "red"))
	print(colored("|  |_> > /_/ | |  |    \  \___|  | \// __ \\  \___|    <\  ___/|  | \/   ", "red"))
	print(colored("|   __/\____ | |__|     \___  >__|  (____  /\___  >__|_ \\___  >__|      ", "red"))
	print(colored("|__|        \/              \/           \/     \/     \/    \/          ", "red"))
	print(colored("\nWritten by: wetw0rk\n", "red"))



try:
	banner()
	file = sys.argv[1]
	wordlist_file = sys.argv[2]

except IndexError:

	banner()
	print('Usage: %s <pdf_file> <wordlist>' % sys.argv[0])
	sys.exit()

# open file in read binary (duh)
pdf_to_read = PyPDF2.PdfFileReader(open(file, 'rb'))
# open wordlist and read every line
wordlist_to_open = open(wordlist_file, 'r')
wordlist = wordlist_to_open.read()
dictionary = wordlist.split()
# obtain number of attempts
password_attempts = len(dictionary)
print "[>] Attempting %d Passwords" % (password_attempts)

for password in range(password_attempts):
	# when password fails 0 is returned from file
	if pdf_to_read.decrypt(dictionary[password]) == 0:
		sys.stdout.write("\r[*]Password Failed:	" + dictionary[password])
		sys.stdout.flush()
		continue
	# when password is successful we recieve a 1
	elif pdf_to_read.decrypt(dictionary[password]) == 1:
		sys.stdout.write("\r\n[+]Password Found:	" + dictionary[password])
		sys.stdout.flush()
		sys.exit("\n")
